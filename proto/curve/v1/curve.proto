syntax = "proto3";

import "google/protobuf/timestamp.proto";

package curve.types.v1;

message Tokens {
  repeated Token tokens = 1;
}

message Token {
  string index = 1; // This refers to the index of the coin relative to the pools `coins` function
  string address = 2;
  string name = 3;
  string symbol = 4;
  uint64 decimals = 5;
  string total_supply = 6;
  bool is_base_pool_lp_token = 7;
  optional string gauge = 8;  // Optional field to track the gauge for reward tokens
}

message Pool {
  string name = 1;
  string symbol = 2;
  string address = 3;
  uint64 created_at_timestamp = 4;
  uint64 created_at_block_number = 5;
  uint64 log_ordinal = 6;
  string transaction_id = 7;
  string registry_address = 8;
  Token output_token = 9;
  repeated string input_tokens_ordered = 10;
  repeated Token input_tokens = 11;
  
  oneof pool_type {
    PlainPool plain_pool = 12;
    CryptoPool crypto_pool = 13;
    TriCryptoPool tricrypto_pool = 14;
    TwoCryptoPool twocrypto_pool = 15;
    MetaPool meta_pool = 16;
    LendingPool lending_pool = 17;
    WildcardPool wildcard_pool = 18;
  }
}

message PoolRewards {
  string staked_output_token_amount = 1;
  repeated string reward_token_emissions_native = 2;
  repeated string reward_token_emissions_usd = 3;
}

message PlainPool {}

message CryptoPool {}

message TriCryptoPool {}

message TwoCryptoPool {}

// Base Metapool structure
message MetaPool {
  string base_pool_address = 1;
  repeated Token underlying_tokens = 2;
  uint64 max_coin = 3;
}

message LendingPool {
  repeated Token underlying_tokens = 2;
}

message WildcardPool {}

message LiquidityGauge {
  string pool = 1;
  string gauge = 2;
  optional string token = 3; 
  uint64 created_at_timestamp = 4;
  uint64 created_at_block_number = 5;
  uint64 log_ordinal = 6;
}

message LiquidityGauges {
  repeated LiquidityGauge liquidity_gauges = 1;
}

message LiquidityGaugeEvents {
  repeated LiquidityEvent liquidity_events = 1;
  repeated AddRewardEvent add_reward_events = 2;
}

message LiquidityEvent {
  string gauge = 1;
  string pool = 2;
  string provider = 3;
  string value = 4;
  GaugeLiquidityEventType type = 5;
  string working_supply = 6;
  string transaction_hash = 7;
  uint32 tx_index = 8;
  uint32 log_index = 9;
  uint64 log_ordinal = 10;
  uint64 timestamp = 11;
  uint64 block_number = 12;
}

message AddRewardEvent {
  string gauge = 1;
  string pool = 2;
  string reward_token = 3;
  string distributor = 4;
  string transaction_hash = 5;
  uint32 tx_index = 6;
  uint64 timestamp = 7;
  uint64 block_number = 8;
}

enum GaugeLiquidityEventType {
  DEPOSIT = 0;
  WITHDRAW = 1;
}

message ControllerNewGauge {
  string gauge = 1;
  GaugeType type = 2;
  string weight = 3; // String representation of BigInt
  uint64 created_at_timestamp = 4;
  uint64 created_at_block_number = 5;
  uint64 log_ordinal = 6;
}

enum GaugeType {
  ETHEREUM_STABLE = 0;
  FANTOM = 1;
  POLYGON = 2;
  DEPRECATED_1 = 3;
  GNOSIS = 4;
  ETHEREUM_CRYPTO = 5;
  DEPRECATED_2 = 6;
  ARBITRUM = 7;
  AVALANCHE = 8;
  HARMONY = 9;
  FUNDRAISING = 10;
  OPTIMISM = 11;
  BINANCE_SMART_CHAIN = 12;
}

// This event is emitted from the CRV token, and allows us to keep track of in the inflation rate
message UpdateMiningParametersEvent {
  string time = 1;
  string rate = 2;
  string supply = 3;
  uint64 created_at_timestamp = 4;
  uint64 created_at_block_number = 5;
  uint64 log_ordinal = 6;
}

// This includes pool and gauge deployments, and GaugeController add events.
// When already deployed gauges are added to the controller, they become eligible for CRV rewards.
// We also track UpdateMiningParametersEvent from the CRV contract, to keep track of inflation.
message CurveEvents {
  repeated Pool pools = 1;
  repeated LiquidityGauge gauges = 2;
  repeated ControllerNewGauge controller_gauges = 3;
  optional UpdateMiningParametersEvent update_mining_parameters_event = 4;
}

enum LiquidityPoolFeeType {
    UNKNOWN = 0;
    FIXED_TRADING_FEE = 1;
    FIXED_PROTOCOL_FEE = 2;
    FIXED_LP_FEE = 3;
}

message PoolFee {
    string id = 1;
    LiquidityPoolFeeType fee_type = 2;
    string fee_percentage = 3; // BigDecimal string representation
}

message PoolFees {
    PoolFee trading_fee = 1;
    PoolFee protocol_fee = 2;
    PoolFee lp_fee = 3;
}


message Events {
  repeated PoolEvent pool_events = 1;
  repeated FeeChangeEvent fee_changes_events = 2;

  message PoolEvent {
    oneof type {
      SwapEvent swap_event = 1;
      SwapUnderlyingMetaEvent swap_underlying_meta_event = 2;
      SwapUnderlyingLendingEvent swap_underlying_lending_event = 3;
      DepositEvent deposit_event = 4;
      WithdrawEvent withdraw_event = 5;
    }
    // Common fields
    string transaction_hash = 6;
    uint32 tx_index = 7;
    uint32 log_index = 8;
    uint64 log_ordinal = 9;
    string to_address = 10;
    string from_address = 11;
    uint64 timestamp = 12;
    uint64 block_number = 13;
    string pool_address = 14;
    // TODO is there benefit in storing the total supply here or in the event types?

    message SwapEvent {
      TokenAmount token_in = 1;
      TokenAmount token_out = 2;
    }

    message SwapUnderlyingMetaEvent {
      TokenAmount token_in = 1;
      TokenAmount token_out = 2;
      string base_pool_address = 3;
      optional LpTokenChange lp_token_change = 4;
    }

    message SwapUnderlyingLendingEvent {
      TokenAmount token_in = 1;  // The underlying token provided by the user.
      TokenAmount token_out = 2;  // The underlying token received by the user.
      
      // Details the action (mint/burn) on the interest-bearing token corresponding to `token_in`.
      // This reflects the change in the lending pool's liquidity for the `token_in` asset.
      // Example:
      //   - In an exchange of USDC for USDT within a lending-based Curve pool:
      //     1. USDC is deposited into the Curve lending pool.
      //     2. The deposited USDC is used to mint the interest-bearing token (e.g., aUSDC in Aave).
      //     3. The pool burns some of its interest-bearing token for USDT (e.g., aUSDT), unlocking USDT.
      //     4. The redeemed USDT is sent to the user initiating the exchange.
      //     5. As a result, the lending pool's balance of aUSDC increases, and its balance of aUSDT decreases.
      optional LpTokenChange interest_bearing_token_in_action = 3;
      // Similar to `interest_bearing_token_in_action`, but for the `token_out` asset.
      optional LpTokenChange interest_bearing_token_out_action = 4;
    }


    message DepositEvent {
        repeated TokenAmount input_tokens = 1;
        TokenAmount output_token = 2;
        repeated string fees = 3;
    }

    message WithdrawEvent {
        repeated TokenAmount input_tokens = 1;
        TokenAmount output_token = 2;
        repeated string fees = 3;
    }

    message TokenAmount {
        string token_address = 1;
        string amount = 2; // BigInt in token's native amount
        string amount_usd = 3;
        TokenSource source = 4;
    }
    
    enum TokenSource {
      DEFAULT = 0; // Default value, used when not dealing with a metapool `TokenExchangeUnderlying` event
      META_POOL = 1;
      BASE_POOL = 2; 
      LENDING_POOL = 3;
    }

    message LpTokenChange {
      string token_address = 1;
      string amount = 2;
      LpTokenChangeType change_type = 3;
    }

    enum LpTokenChangeType {
      MINT = 0;
      BURN = 1;
    }
  }

  message FeeChangeEvent {
    string transaction_hash = 1;
    uint32 tx_index = 2;
    uint32 log_index = 3;
    uint64 log_ordinal = 4;
    uint64 timestamp = 5;
    uint64 block_number = 6;
    string fee = 7;
    optional string admin_fee = 8;
    string pool_address = 9;
  }
}