syntax = "proto3";

import "google/protobuf/timestamp.proto";

package curve.types.v1;

message Tokens {
  repeated Token tokens = 1;
}

message Token {
  string address = 1;
  string name = 2;
  string symbol = 3;
  uint64 decimals = 4;
  string total_supply = 5;
  bool is_base_pool_lp_token = 6;
}

message Pool {
  string name = 1;
  string symbol = 2;
  string address = 3;
  uint64 created_at_timestamp = 4;
  uint64 created_at_block_number = 5;
  uint64 log_ordinal = 6;
  string transaction_id = 7;
  string registry_address = 8;
  Token output_token = 9;
  repeated string input_tokens_ordered = 10;
  repeated Token input_tokens = 11;
  bool is_metapool = 12;
}

message Pools {
  repeated Pool pools = 1;
}

enum LiquidityPoolFeeType {
    UNKNOWN = 0;
    FIXED_TRADING_FEE = 1;
    FIXED_PROTOCOL_FEE = 2;
    FIXED_LP_FEE = 3;
}

message PoolFee {
    string id = 1;
    LiquidityPoolFeeType fee_type = 2;
    string fee_percentage = 3; // BigDecimal string representation
}

message PoolFees {
    PoolFee trading_fee = 1;
    PoolFee protocol_fee = 2;
    PoolFee lp_fee = 3;
}


message Events {
  repeated PoolEvent pool_events = 1;
  repeated FeeChangeEvent fee_changes_events = 2;

  message PoolEvent {
    oneof type {
      SwapEvent swap_event = 1;
      SwapUnderlyingEvent swap_underlying_event = 2;
      DepositEvent deposit_event = 3;
      WithdrawEvent withdraw_event = 5;
    }
    // Common fields
    string transaction_hash = 6;
    uint32 tx_index = 7;
    uint32 log_index = 8;
    uint64 log_ordinal = 9;
    string to_address = 10;
    string from_address = 11;
    uint64 timestamp = 12;
    uint64 block_number = 13;
    string pool_address = 14;
    // TODO is there benefit in storing the total supply here or in the event types?

    message SwapEvent {
      TokenAmount token_in = 1;
      TokenAmount token_out = 2;
    }

    message SwapUnderlyingEvent {
      TokenAmount token_in = 1;
      TokenAmount token_out = 2;
      string base_pool_address = 3;
      TokenAmount lp_token_burnt = 4;
    }

    message DepositEvent {
        repeated TokenAmount input_tokens = 1;
        TokenAmount output_token = 2;
        repeated string fees = 3;
    }

    message WithdrawEvent {
        repeated TokenAmount input_tokens = 1;
        TokenAmount output_token = 2;
        repeated string fees = 3;
    }

    message TokenAmount {
        string token_address = 1;
        string amount = 2; // BigInt in token's native amount
        // string amount_usd = 3;
    }
  }

  message FeeChangeEvent {
    string transaction_hash = 1;
    uint32 tx_index = 2;
    uint32 log_index = 3;
    uint64 log_ordinal = 4;
    uint64 timestamp = 5;
    uint64 block_number = 6;
    string fee = 7;
    optional string admin_fee = 8;
    string pool_address = 9;
  }
}